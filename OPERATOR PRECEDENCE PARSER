/* 
   PGM : OPERATOR PRECEDENCE PARSER
*/
 



#include<stdio.h>
#include<string.h>
#include<malloc.h>



int getindex(char c)
{
switch(c)
    {
    case '+':return 0;
    case '-':return 1;
    case '*':return 2;
    case '/':return 3;
    case '^':return 4;
    case 'i':return 5;
    case '(':return 6;
    case ')':return 7;
    case '$':return 8;
    }
}

int top=0,l;
char prec[9][9]={

               '>', '>','<','<','<','<','<','>','>',
              '>', '>','<','<','<','<','<','>','>',
             '>', '>','>','>','<','<','<','>','>',

            '>', '>','>','>','<','<','<','>','>',

            '>', '>','>','>','<','<','<','>','>',

            '>', '>','>','>','>','e','e','>','>',

            '<', '<','<','<','<','<','<','>','e',

            '>', '>','>','>','>','e','e','>','>',

            '<', '<','<','<','<','<','<','<','>',

                };



char *input;
int i=0;
char lasthandle[6],stack[50],handles[][5]={")E(","E*E","E+E","i","E^E"};
int shift()
{
stack[++top]=*(input+i++);
stack[top+1]='\0';
}


int reduce()
{
int i,len,found,t;
for(i=0;i<5;i++)
    {
    len=strlen(handles[i]);
    if(stack[top]==handles[i][0]&&top+1>=len)
        {
        found=1;
        for(t=0;t<len;t++)
            {
            if(stack[top-t]!=handles[i][t])
                {
                found=0;
                break;
                }
            }
        if(found==1)
            {
            stack[top-t+1]='E';
            top=top-t+1;
            strcpy(lasthandle,handles[i]);
            stack[top+1]='\0';
            return 1;
            }
        }
   }
return 0;
}


void dispinput()
{
int j;
for(j=i;j<l;j++)
    printf("%c",*(input+j));
printf("\t\t");
}


void dispstack()
{
int j;
for(j=0;j<=top;j++)
    printf("%c",stack[j]);
printf("\t\t");
}



void main()
{


printf("The given Grammar is \n");
printf("E- > i | E-> E*E | E+E | (E) | E^E \n");

printf("\n\nPrecedence table\n\n");
printf("   +  -  *  /  ^  i  (  )  $  \n");
printf("________________________________\n");
char temp[9]={'+','-','*','/','^','i','(',')','$'};
int i1,j1;
for(i1=0;i1<9;i1++)
{
    printf("%c| ",temp[i1]);
    for(j1=0;j1<9;j1++)
    {
        printf("%c  ",prec[i1][j1]);
    }
    printf("\n");
}
int j;
printf("\n");
input=(char*)malloc(50*sizeof(char));

scanf("%s",input);
printf("\nInput String =%s\n\n",input);

input=strcat(input,"$");
l=strlen(input);
strcpy(stack,"$");
printf("\nSTACK\t\tINPUT\t\t\t\t\tACTION\n");
while(i<=l)
	{
	shift();
	printf("\n");
	dispstack();
	printf("\t");
	dispinput();
	printf("\t\tShift");
	if(prec[getindex(stack[top])][getindex(input[i])]=='>')
		{
		while(reduce())
			{
			printf("\n");
			dispstack();
			printf("\t");
			dispinput();
			printf("\t\tReduced: E->%s",lasthandle);
			}
		}
	}

printf("\n");
if(strcmp(stack,"$E$")==0)
    printf("\n\n\nThe  given   String   is   Accepted\n",input);
else
    printf("\nString Not Accepted;");
}


/*  OUTPUT

The given Grammar is 
E- > i | E-> E*E | E+E | (E) | E^E 


Precedence table

   +  -  *  /  ^  i  (  )  $  
________________________________
+| >  >  <  <  <  <  <  >  >  
-| >  >  <  <  <  <  <  >  >  
*| >  >  >  >  <  <  <  >  >  
/| >  >  >  >  <  <  <  >  >  
^| >  >  >  >  <  <  <  >  >  
i| >  >  >  >  >  e  e  >  >  
(| <  <  <  <  <  <  <  >  e  
)| >  >  >  >  >  e  e  >  >  
$| <  <  <  <  <  <  <  <  >  


Input String =i*(i+i)*i


STACK		INPUT					ACTION

$i			*(i+i)*i$				Shift
$E			*(i+i)*i$				Reduced: E->i
$E*			(i+i)*i$				Shift
$E*(			i+i)*i$				Shift
$E*(i			+i)*i$				Shift
$E*(E			+i)*i$				Reduced: E->i
$E*(E+			i)*i$				Shift
$E*(E+i			)*i$				Shift
$E*(E+E			)*i$				Reduced: E->i
$E*(E			)*i$				Reduced: E->E+E
$E*(E)			*i$				Shift
$E*E			*i$				Reduced: E->)E(
$E			*i$				Reduced: E->E*E
$E*			i$				Shift
$E*i			$				Shift
$E*E			$				Reduced: E->i
$E			$				Reduced: E->E*E
$E$							Shift
$E$



The  given   String   is   Accepted


*/
